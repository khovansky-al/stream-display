{"version":3,"file":"stream-display.js","sources":["../src/StreamDisplay.ts"],"sourcesContent":["\nimport { FixedMediaDevices, FixedMediaStreamConstraints } from './globals';\n\nconst DISPLAY_MEDIA_OPTIONS: FixedMediaStreamConstraints = {\n  video: {\n    cursor: 'never',\n  },\n  audio: false,\n};\n\ntype CallbackFn = (imageData: ImageData) => void\ntype Configuration = {\n  scanInterval?: number;\n}\n\nexport default class StreamDisplay {\n  static readonly DEFAULT_SCAN_INTERVAL_MS = 1000;\n\n  private video: HTMLVideoElement;\n  private canvas: HTMLCanvasElement;\n  private canvasContext: CanvasRenderingContext2D;\n  private callback: CallbackFn;\n  private intervalId: number = 0;\n  private scanInterval: number = StreamDisplay.DEFAULT_SCAN_INTERVAL_MS;\n\n  private _isCapturing: boolean = false;\n\n  streamHeight: number = 0;\n\n  streamWidth: number = 0;\n\n  constructor(callback: CallbackFn, options: Configuration = {}) {\n    this.video = document.createElement('video');\n    this.canvas = document.createElement('canvas');\n\n    const context = this.canvas.getContext('2d');\n    if (context == null) {\n      throw new Error('Cannot initialize canvas context');\n    }\n\n    this.canvasContext = context;\n    this.callback = callback;\n\n    const { scanInterval } = (options || {}) as Configuration;\n    this.scanInterval = scanInterval || this.scanInterval;\n    StreamDisplay.validateScanInterval(this.scanInterval);\n  }\n\n  startCapture = async () => {\n    const devices = navigator.mediaDevices as FixedMediaDevices;\n    this.video.srcObject = await devices.getDisplayMedia(DISPLAY_MEDIA_OPTIONS);\n    this.video.play();\n\n    this.setupCanvas();\n    this.stream();\n    this.intervalId = window.setInterval(this.stream, this.scanInterval);\n    this._isCapturing = true;\n  }\n\n  stopCapture = () => {\n    window.clearInterval(this.intervalId);\n\n    const videoSource = this.video.srcObject as MediaStream;\n    const tracks = videoSource.getTracks();\n\n    tracks.forEach(track => track.stop());\n    this._isCapturing = false;\n  }\n\n  get isCapturing() {\n    return this._isCapturing;\n  }\n\n  private setupCanvas = () => {\n    const videoSource = this.video.srcObject as MediaStream;\n    const videoTrack = videoSource.getVideoTracks()[0];\n\n    const { height, width } = videoTrack.getSettings();\n\n    this.streamWidth = width || 0;\n    this.streamHeight = height || 0;\n\n    this.canvas.height = this.streamHeight;\n    this.canvas.width = this.streamWidth;\n  }\n\n  private stream = () => {\n    this.drawVideoToCanvas();\n    this.callback(this.getImageData());\n  }\n\n  private drawVideoToCanvas() {\n    const {\n      streamHeight, streamWidth, video, canvasContext,\n    } = this;\n    canvasContext.drawImage(video, 0, 0, streamWidth, streamHeight);\n  }\n\n  private getImageData(): ImageData {\n    const { streamHeight, streamWidth, canvasContext } = this;\n    return canvasContext.getImageData(0, 0, streamWidth, streamHeight);\n  }\n\n  private static validateScanInterval(interval: number) {\n    if (interval >= 1000) return;\n\n    throw new Error('\\\n      [stream-display] Scan interval is set under 1000ms. \\\n      Will be overridden by the browser to 1000ms when tab is in background');\n  }\n}\n"],"names":["DISPLAY_MEDIA_OPTIONS","video","cursor","audio","callback","options","this","StreamDisplay","DEFAULT_SCAN_INTERVAL_MS","devices","navigator","mediaDevices","_a","getDisplayMedia","srcObject","_b","play","setupCanvas","stream","intervalId","window","setInterval","scanInterval","_isCapturing","clearInterval","_this","getTracks","forEach","track","stop","getVideoTracks","height","width","streamWidth","streamHeight","canvas","drawVideoToCanvas","getImageData","document","createElement","context","getContext","Error","canvasContext","validateScanInterval","Object","drawImage","interval"],"mappings":"mzDAGA,IAAMA,EAAqD,CACzDC,MAAO,CACLC,OAAQ,SAEVC,OAAO,gBAwBP,WAAYC,EAAsBC,GAAlC,wBAAkCA,MAT1BC,gBAAqB,EACrBA,kBAAuBC,EAAcC,yBAErCF,mBAAwB,EAEhCA,kBAAuB,EAEvBA,iBAAsB,EAmBtBA,kBAAe,0GAEU,OADjBG,EAAUC,UAAUC,aAC1BC,EAAAN,KAAKL,SAAwBQ,EAAQI,gBAAgBb,kBAArDY,EAAWE,UAAYC,SACvBT,KAAKL,MAAMe,OAEXV,KAAKW,cACLX,KAAKY,SACLZ,KAAKa,WAAaC,OAAOC,YAAYf,KAAKY,OAAQZ,KAAKgB,cACvDhB,KAAKiB,cAAe,cAGtBjB,iBAAc,WACZc,OAAOI,cAAcC,EAAKN,YAENM,EAAKxB,MAAMa,UACJY,YAEpBC,SAAQ,SAAAC,GAAS,OAAAA,EAAMC,UAC9BJ,EAAKF,cAAe,GAOdjB,iBAAc,WACpB,IAGMM,EAHca,EAAKxB,MAAMa,UACAgB,iBAAiB,iBAExCC,WAAQC,UAEhBP,EAAKQ,YAAcD,GAAS,EAC5BP,EAAKS,aAAeH,GAAU,EAE9BN,EAAKU,OAAOJ,OAASN,EAAKS,aAC1BT,EAAKU,OAAOH,MAAQP,EAAKQ,aAGnB3B,YAAS,WACfmB,EAAKW,oBACLX,EAAKrB,SAASqB,EAAKY,iBAxDnB/B,KAAKL,MAAQqC,SAASC,cAAc,SACpCjC,KAAK6B,OAASG,SAASC,cAAc,UAErC,IAAMC,EAAUlC,KAAK6B,OAAOM,WAAW,MACvC,GAAe,MAAXD,EACF,MAAM,IAAIE,MAAM,oCAGlBpC,KAAKqC,cAAgBH,EACrBlC,KAAKF,SAAWA,EAER,IAAAkB,uBACRhB,KAAKgB,aAAeA,GAAgBhB,KAAKgB,aACzCf,EAAcqC,qBAAqBtC,KAAKgB,cAiE5C,OAzCEuB,sBAAItC,+BAAJ,WACE,OAAOD,KAAKiB,8CAqBNhB,8BAAR,WACQ,IAAAK,OACJsB,iBAAcD,gBAAahC,0BAEf6C,UAAU7C,EAAO,EAAG,EAAGgC,EAAaC,IAG5C3B,yBAAR,WACQ,IAAAK,OAAEsB,iBAAcD,gBACtB,uBAAqBI,aAAa,EAAG,EAAGJ,EAAaC,IAGxC3B,uBAAf,SAAoCwC,GAClC,KAAIA,GAAY,KAEhB,MAAM,IAAIL,MAAM,0IA1FFnC,2BAA2B,mBADxBA"}