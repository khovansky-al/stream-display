{"version":3,"file":"stream-display.js","sources":["../src/StreamDisplay.ts"],"sourcesContent":["const DISPLAY_MEDIA_OPTIONS: MediaStreamConstraints = {\n  video: {\n    cursor: 'never'\n  },\n  audio: false\n}\n\ndeclare global {\n  /*\n    MediaDevices.getDisplayMedia is currently typed incorrectly\n    https://github.com/microsoft/TypeScript/issues/31821\n  */\n  interface MediaDevices {\n    getDisplayMedia(constraints: MediaStreamConstraints): Promise<MediaStream>;\n  }\n\n  interface MediaTrackConstraints {\n    cursor: ConstrainDOMString;\n  }\n\n  interface MediaStreamConstraints {\n    video?: MediaTrackConstraints | boolean;\n    audio?: MediaTrackConstraints | boolean;\n  }\n}\n\ntype CallbackFn = (imageData: ImageData) => any\ntype Configuration = {\n  scanInterval?: number;\n}\n\nexport default class StreamDisplay {\n  public static readonly DEFAULT_SCAN_INTERVAL_MS = 1000;\n\n  private video: HTMLVideoElement;\n  private canvas: HTMLCanvasElement;\n  private canvasContext: CanvasRenderingContext2D;\n  private callback: CallbackFn;\n  private intervalId: number = 0;\n  private scanInterval: number = StreamDisplay.DEFAULT_SCAN_INTERVAL_MS;\n\n  public streamHeight: number = 0;\n  public streamWidth: number = 0;\n\n  constructor(callback: CallbackFn, options: Configuration = {}) {\n    this.video = document.createElement('video');\n    this.canvas = document.createElement('canvas');\n\n    const context = this.canvas.getContext('2d');\n    if (context == null) {\n      throw 'Cannot initialize canvas context'\n    }\n\n    this.canvasContext = context;\n    this.callback = callback;\n\n    const { scanInterval } = (options || {}) as Configuration;\n    this.scanInterval = scanInterval || this.scanInterval;\n    this.validateScanInterval(this.scanInterval);\n  }\n\n  startCapture = async () => {\n    const devices = navigator.mediaDevices as MediaDevices;\n    this.video.srcObject = await devices.getDisplayMedia(DISPLAY_MEDIA_OPTIONS);\n    this.video.play();\n\n    this.setupCanvas();\n    this.stream();\n    this.intervalId = window.setInterval(this.stream, this.scanInterval);\n  }\n\n  stopCapture = () => {\n    window.clearInterval(this.intervalId);\n\n    const videoSource = this.video.srcObject as MediaStream;\n    const tracks = videoSource.getTracks();\n\n    tracks.forEach(track => track.stop());\n  }\n\n  private setupCanvas = () => {\n    const videoSource = this.video.srcObject as MediaStream;\n    const videoTrack = videoSource.getVideoTracks()[0];\n\n    const { height, width } = videoTrack.getSettings();\n\n    this.streamWidth = width || 0;\n    this.streamHeight = height || 0;\n\n    this.canvas.height = this.streamHeight;\n    this.canvas.width = this.streamWidth;\n  }\n\n  private stream = () => {\n    this.drawVideoToCanvas();\n    this.callback(this.getImageData());\n  }\n\n  private drawVideoToCanvas() {\n    const { streamHeight, streamWidth, video, canvasContext } = this;\n    canvasContext.drawImage(video, 0, 0, streamWidth, streamHeight);\n  }\n\n  private getImageData(): ImageData {\n    const { streamHeight, streamWidth, canvasContext } = this;\n    return canvasContext.getImageData(0, 0, streamWidth, streamHeight);\n  }\n\n  private validateScanInterval(interval: number) {\n    if (interval >= 1000) return;\n    console.warn('\\\n      [stream-display] Scan interval is set under 1000ms. \\\n      Will be overridden by the browser to 1000ms when tab is in background'\n    );\n  }\n}\n"],"names":["DISPLAY_MEDIA_OPTIONS","video","cursor","audio","callback","options","this","StreamDisplay","DEFAULT_SCAN_INTERVAL_MS","devices","navigator","mediaDevices","_a","getDisplayMedia","srcObject","_b","play","setupCanvas","stream","intervalId","window","setInterval","scanInterval","clearInterval","_this","getTracks","forEach","track","stop","getVideoTracks","height","width","streamWidth","streamHeight","canvas","drawVideoToCanvas","getImageData","document","createElement","context","getContext","canvasContext","validateScanInterval","drawImage","interval","console","warn"],"mappings":"6yDAAA,IAAMA,EAAgD,CACpDC,MAAO,CACLC,OAAQ,SAEVC,OAAO,gBAwCP,WAAYC,EAAsBC,GAAlC,wBAAkCA,MAN1BC,gBAAqB,EACrBA,kBAAuBC,EAAcC,yBAEtCF,kBAAuB,EACvBA,iBAAsB,EAmB7BA,kBAAe,wGAEU,OADjBG,EAAUC,UAAUC,aAC1BC,EAAAN,KAAKL,SAAwBQ,EAAQI,gBAAgBb,kBAArDY,EAAWE,UAAYC,SACvBT,KAAKL,MAAMe,OAEXV,KAAKW,cACLX,KAAKY,SACLZ,KAAKa,WAAaC,OAAOC,YAAYf,KAAKY,OAAQZ,KAAKgB,wBAGzDhB,iBAAc,WACZc,OAAOG,cAAcC,EAAKL,YAENK,EAAKvB,MAAMa,UACJW,YAEpBC,QAAQ,SAAAC,GAAS,OAAAA,EAAMC,UAGxBtB,iBAAc,WACpB,IAGMM,EAHcY,EAAKvB,MAAMa,UACAe,iBAAiB,iBAExCC,WAAQC,UAEhBP,EAAKQ,YAAcD,GAAS,EAC5BP,EAAKS,aAAeH,GAAU,EAE9BN,EAAKU,OAAOJ,OAASN,EAAKS,aAC1BT,EAAKU,OAAOH,MAAQP,EAAKQ,aAGnB1B,YAAS,WACfkB,EAAKW,oBACLX,EAAKpB,SAASoB,EAAKY,iBAlDnB9B,KAAKL,MAAQoC,SAASC,cAAc,SACpChC,KAAK4B,OAASG,SAASC,cAAc,UAErC,IAAMC,EAAUjC,KAAK4B,OAAOM,WAAW,MACvC,GAAe,MAAXD,EACF,KAAM,mCAGRjC,KAAKmC,cAAgBF,EACrBjC,KAAKF,SAAWA,EAER,IAAAkB,uBACRhB,KAAKgB,aAAeA,GAAgBhB,KAAKgB,aACzChB,KAAKoC,qBAAqBpC,KAAKgB,cAyDnC,OAjBUf,8BAAR,WACQ,IAAE0B,oBAAcD,mBAAa/B,gCACrB0C,UAAU1C,EAAO,EAAG,EAAG+B,EAAaC,IAG5C1B,yBAAR,WACQ,IAAE0B,oBAAcD,mBACtB,0BAAqBI,aAAa,EAAG,EAAGJ,EAAaC,IAG/C1B,iCAAR,SAA6BqC,GACvBA,GAAY,KAChBC,QAAQC,KAAK,0IA9EQvC,2BAA2B,mBAD/BA"}